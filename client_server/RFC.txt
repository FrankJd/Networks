Synchronization Policies:
In general, Synchronization is the mechanism which ensures that two or more client requests are not being processed simultaneously. There is many situations where such conditions arise. The following is some basic examples:
1)	A client requesting to REMOVE a book from the list while another client is requesting to GET access to the same book at the same time. 
2)	A client requesting to REMOVE a book from the list while another client is requesting to UPDATE the same book at the same time. 
3)	Two or more clients are SUBMITing the same book at the same time
Such conflicts can be resolved using mutual exclusive synchronization such as synchronized methods. Synchronized methods are used to lock an object from any shared resources. When a client invokes a synchronized method in there server side, it automatically acquires the lock and releases it when the client request is completed.   



Server-side Data Structures:
There is many ways of organizing and storing data in a computer. In our Server-side application the most convenient way to store the data so that it can be accessed and modified efficiently is using the abstract data type ArrayList due to the following reasons.  
1)	ArrayList is resizable-array implementation of the List interface with all the optional list operations.
2)	ArrayList permits all elements including null.
3)	ArrayList can be created generically which allows the list to store any object type.
Although ArrayList seems to be the most convenient ADT it also had its own downfalls, ArrayList is unsynchronized ADT which could possibly cause unsynchronized access to the list. To avoid such inconvenience, the list should be “wrapped” using the “Collections.synchronizedList” method at creation time, to prevent accidental unsynchronized access to the list. 
